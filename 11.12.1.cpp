//栈的运用-->表达式求值问题
// 中缀表达式：
//三个部分：操作数、运算符、界限符
//波兰数学家的灵感：可以不用界限符也可以无歧义的表达运算顺序
//后缀表达式--逆波兰表达式
//前缀表达式--波兰表达式
//中缀表达式：a + b     a+b-c                a+b-c*d
//后缀表达式：a b +    (ab+)c- = ab+c-      ( ab+)(cd*)- = ab+cd*-
//前缀表达式：+ a b     -(+ab)c = -+abc     -(+ab)(*cd)  = -+ab*cd
//“左优先”原则（中缀转前缀）
// 
//用栈实现后缀表达式的计算
// 
//1.从左到右扫描下一个元素，直接处理完所有元素
//2.若扫描到操作数则压入栈，并回到1；否则执行3
//3.若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回站顶，回到1
//注意点：先出栈的是右操作数
//“右优先”原则（中缀转后缀）：只要右边的运算符能先计算，就优先算右边的
// 
//用栈实前缀椎表达式的计算
// 
//1.从右往左扫描下一个元素，直到处理完所有元素
//2.若扫描到操作数则压入栈中，并返回到1；否则执行3
//3.若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到1
//
//中缀表达式转后缀表达式（计算）
//初始化一个栈，用于保存暂时还不能确定运算顺序的运算符
//从左到右处理各个元素，直到末尾。可能遇到三种情况：
//1.遇到操作数。直接加入后缀表达式。
//2.遇到界限符。遇到“（”直接入栈；遇到“）”则依次弹出栈内运算符并加入后缀表达式，直到弹出“（”为止。注意：“（”不加入后缀表达式。
//3.遇到运算符。依次弹出栈中优先级高于或等于当前运算符的所有运算符，并加入后缀表达式，若碰到“（”或栈空则停止。之后再把当前运算符入栈。

//用栈实现中缀表达式的计算
//初始化两个栈，操作数栈和运算符栈
//若扫描到两个栈，操作数栈和运算符栈
//若扫描到操作数，压入操作数栈
//若扫描到运算符或界限符，则按照“中缀转后缀”相同的逻辑压入运算符栈（期间也会弹出运算符，每当弹出两个操作数栈的栈顶元素并执行相应的计算，运算结果在压回操作数栈

//这种思想非常重要